"use strict";(self.webpackChunkbaiziyu_fe_notes=self.webpackChunkbaiziyu_fe_notes||[]).push([[300],{4427:(e,a,n)=>{n.r(a),n.d(a,{data:()=>r});const r={key:"v-61356017",path:"/React/React%20Concurrent%20Mode.html",title:"从React 开始架构分析",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. v16之前的架构（铁憨憨式）",slug:"_1-v16之前的架构-铁憨憨式",children:[]},{level:2,title:"2. V16+架构分析",slug:"_2-v16-架构分析",children:[]},{level:2,title:"3. Concurrent Mode",slug:"_3-concurrent-mode",children:[{level:3,title:"3.1 Concurrent Mode 原理",slug:"_3-1-concurrent-mode-原理",children:[]}]}],filePathRelative:"React/React Concurrent Mode.md",git:{updatedTime:1639387904e3,contributors:[{name:"baiziyu-fe",email:"77950278+baiziyu-fe@users.noreply.github.com",commits:1}]}}},5984:(e,a,n)=>{n.r(a),n.d(a,{default:()=>i});const r=(0,n(6252).uE)('<h1 id="从react-开始架构分析" tabindex="-1"><a class="header-anchor" href="#从react-开始架构分析" aria-hidden="true">#</a> 从React 开始架构分析</h1><img src="https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCtASWS2KK5DOaHjiasJGHBtbb6trLa8ic9bjwPNTg6fBzibNY4sibIzmJ94B33b5AkCx6alYqcjG1XWlw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"><h2 id="_1-v16之前的架构-铁憨憨式" tabindex="-1"><a class="header-anchor" href="#_1-v16之前的架构-铁憨憨式" aria-hidden="true">#</a> 1. v16之前的架构（铁憨憨式）</h2><blockquote><p>主流浏览器刷新频率为 60Hz，即每 16.6ms 浏览器刷新一次，每 16.6ms 要完成 JS 执行、重绘重排。而 JS 线程和 GUI 线程是互斥的，在浏览器的一帧里（16.6ms）JS 脚本执行和页面渲染是同步执行的，一旦 JS 脚本执行时间过长，页面就会出现掉帧卡顿。</p></blockquote><ul><li>reconciler：对比VDom和真实dom的过程，也就是更新的diff过程。</li><li>renderer：将组件更新渲染至页面。</li></ul><p><code>React 15</code>(16 之前)的组件采用的时递归更新的方式对组件进行对应的挂载和更新的操作。所以当层级较深时，递归的时间会对页面造成较大影响。</p><p>这里的逻辑就像是顾客在餐厅（React项目中），每隔一会想修改菜单就喊服务员（浏览器）</p><ul><li>服务员有时候忙于给别的顾客服务（其他更新任务服务），无法抽身，导致顾客不满（引发卡顿）</li><li>服务员帮用户处理，一一对比用户的菜单和之前的不同，每次发现一个不同就跑到后厨（Renderer）通知一次</li></ul><h2 id="_2-v16-架构分析" tabindex="-1"><a class="header-anchor" href="#_2-v16-架构分析" aria-hidden="true">#</a> 2. V16+架构分析</h2><p>为了避免&quot;JS 脚本执行时间过长，页面就会出现掉帧卡顿&quot;这个问题，16之后的版本在浏览器每一帧的时间里，预留出来一部分给 JS 线程（目前源码是预留<code>5ms</code>）。</p><p>如果预留的时间用完了，JS 线程还没执行完，那么 JS 线程就会被中断阻塞，GUI 渲染线程获得执行权，这一帧执行完了，React 则继续被中断的任务。</p><p>这里因为考虑兼容性的问题，没有采用浏览器已经实现的api <code>requestIdleCallback</code>。<code>React</code> 自己实现了一套这样的机制，并给他起名<code>Scheduler</code>，也就是他使得<code>Reconciler</code>由之前的<code>Stack Reconciler</code>转变为现在大名鼎鼎的<code>Fiber Reconciler</code>。</p><p>自此，<code>React</code> 学会了对于需更新的状态不再频繁更新，而是<code>Scheduler</code>发现浏览器有空，把更新任务交给<code>Reconciler</code>去给需要更新的VDom打上标记(symbol)。然后等打完以后<code>Renderer</code>才去处理。</p><p>这里现在的逻辑就变成了顾客在餐厅订餐系统（Scheduler）更改已经下单的菜品，订餐系统发现服务员（浏览器）有空，然后服务员收到通知（更新任务），服务员在点餐系统中给需要修改的菜品加上备注（Reconciler），然后由点餐系统（Renderer）将这些信息展示给后厨。</p><p>费这么多时间重写架构就只是为了提升运行时性能吗？</p><p>其实 Concurrent Mode 才是架构重写的源动力，也是 React 未来的发展方向。在这个架构基础下，也会有更多的基于 Concurrent Mode 的上层应用产生。</p><h2 id="_3-concurrent-mode" tabindex="-1"><a class="header-anchor" href="#_3-concurrent-mode" aria-hidden="true">#</a> 3. Concurrent Mode</h2><blockquote><p>Concurrent Mode 是 React 的一组新功能。可帮助应用保持响应，并根据用户的设备性能和网速进行适当地调整。</p></blockquote><ul><li>三大特点： <ul><li>可以控制渲染流程，可中断 JS 执行，把控制权交还给浏览器。</li><li>并发，引入优先级调度算法，可以并发执行多个更新任务。</li><li>将人机交互的研究成果投入实际的应用当中。</li></ul></li></ul><h3 id="_3-1-concurrent-mode-原理" tabindex="-1"><a class="header-anchor" href="#_3-1-concurrent-mode-原理" aria-hidden="true">#</a> 3.1 Concurrent Mode 原理</h3><p><img src="https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCtASWS2KK5DOaHjiasJGHBtb9usMnNxdF4b2u77OkCCLgcFWuxG6Jltiaic16rsMUbkSnZmGceOMeezw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><h4 id="_3-1-1-时间切片" tabindex="-1"><a class="header-anchor" href="#_3-1-1-时间切片" aria-hidden="true">#</a> 3.1.1 时间切片</h4><p>React 为了解决卡顿问题，将更新任务作为时间切片来执行，因此需要一个机制来调度切片，浏览器原生提供了 <code>requestIdelCallback</code> API。</p><div class="language-JS ext-JS line-numbers-mode"><pre class="language-JS"><code>function task(deadline) {\n  while (true) {\n    if (!deadline.timeRemaining) {\n      requestIdleCallback(task);\n      // 主动退出循环，将控制权交还浏览器\n      break;\n    }\n  };\n}\nrequestIdleCallback(task);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面说到，<code>Scheduler</code>就是<code>React</code>制作的<code>requestIdelCallback</code>的替代品。</p><p>在一帧里 JS 的执行顺序，只有 <code>requestIdelCallback</code> 是在浏览器重绘重排之后。退而求其次，我们选择宏任务来代替，<code>setTimeout</code> 是我们最熟悉的宏任务调度函数，但有一个 api 要比它执行顺序靠前，即 <code>MessageChannel</code>。当浏览器不兼容时，再降级使用 <code>setTimeout</code>。</p><p>所以 上述提到的 api 的执行顺序如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCtASWS2KK5DOaHjiasJGHBtbA6SS2yVj18s2FPzPOHe2wLG3ssHxHFFdrOlsvhdJGJGHxjia3SBVJnQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><h4 id="_3-1-2-切片标准-默认5ms-可以依据系统-fps-来进行调整" tabindex="-1"><a class="header-anchor" href="#_3-1-2-切片标准-默认5ms-可以依据系统-fps-来进行调整" aria-hidden="true">#</a> 3.1.2 切片标准(默认5ms，可以依据系统 fps 来进行调整)</h4><div class="language-JS ext-JS line-numbers-mode"><pre class="language-JS"><code>const forceFrameRate = (fps) =&gt; {\n  if (fps &lt; 0 || fps &gt; 125) {\n    return;\n  }\n  if (fps &gt; 0) {\n    yieldInterval = Math.floor(1000 / fps);\n  } else {\n    yieldInterval = 5;\n  }\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_3-1-3-reconciler的fiber" tabindex="-1"><a class="header-anchor" href="#_3-1-3-reconciler的fiber" aria-hidden="true">#</a> 3.1.3 Reconciler的Fiber</h4><p>原本基于 VDOM 的递归，就变成基于 Fiber 节点的迭代，同时 Fiber 节点在内存中保存了需要处理的上下文信息，可以很方便地中断和恢复。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCtASWS2KK5DOaHjiasJGHBtbdOhQxiauP1pbpjGUP6Ygz1Cz7ckMWWicrzK2oIUjZrTNnRXspFumn0zA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><h4 id="_3-1-4-生命周期-阶段-改造" tabindex="-1"><a class="header-anchor" href="#_3-1-4-生命周期-阶段-改造" aria-hidden="true">#</a> 3.1.4 生命周期（阶段）改造</h4><p>引入时间切片后，一边 diff 一边提交的模式显然不再适用。React16 则把更新过程拆成两部分 —— 协调阶段和提交阶段。</p><ul><li>协调阶段</li></ul><p>协调阶段（diff 阶段）会找出所有节点变更，例如节点新增、删除、属性变更等等（副作用），只有这个阶段可以被中断。</p><div class="language-JS ext-JS line-numbers-mode"><pre class="language-JS"><code>static getDerivedStateFromProps()\nshouldComponentUpdate()\nRender()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>提交阶段</li></ul><p>提交阶段将节点变更一次性渲染到页面，这个阶段不可中断。因为这个阶段的生命周期里可能会做一些带 副作用 的操作，如果中断了，可能会重复执行，带来一些意想不到的 bug。</p><div class="language-JS ext-JS line-numbers-mode"><pre class="language-JS"><code>getSnapshotBeforeUpdate()\ncomponentDidMount()\ncomponentDidUpdate()\ncomponentWillUnmount()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3-1-5-优先级模型" tabindex="-1"><a class="header-anchor" href="#_3-1-5-优先级模型" aria-hidden="true">#</a> 3.1.5 优先级模型</h4><p>Concurrent Mode 模式下的更新是异步可中断的更新，除了时间片用完，还有一种中断的可能：正在更新的任务被中断，转而开始一次新的更新。我们可以说后一次的更新打断了正在执行的更新，这就是优先级的概念：后一次任务的优先级更高，打断了正在执行的更低优先级的任务。</p><h4 id="_3-1-6-expirationtime-模型" tabindex="-1"><a class="header-anchor" href="#_3-1-6-expirationtime-模型" aria-hidden="true">#</a> 3.1.6 expirationTime 模型</h4><p>Scheduler 除了拥有 requestIdelCallback 的能力，还提供了多种优先级供调度选择。</p><div class="language-JS ext-JS line-numbers-mode"><pre class="language-JS"><code>ImmediatePriority:\nUserBlockingPriority:\nNormalPriority:\nLowPriority:\nIdlePriority:\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Scheduler 提供了两个重要的 api：</p><p>runWithPriority：优先级调度的函数，React 内部所有需要优先级调度的都会用到；</p><p>scheduleCallback：不同的是可以传一个优先级参数，根据任务优先级的大小先后执行（模拟 requestIdelCallback）。</p><p>这里的优先级表示啥呢？</p><p>指任务的过期时间（expirationTime），也就是：</p><ul><li>过期时间越短，优先级越高</li><li>随着时间推移，当前时间越接近过期时间，优先级变高</li><li>某个任务的过期时间比当前时间短，表示已经过期，需要立即执行（可能会发生中断）</li></ul><h4 id="_3-1-7-lane-s-模型" tabindex="-1"><a class="header-anchor" href="#_3-1-7-lane-s-模型" aria-hidden="true">#</a> 3.1.7 Lane(s) 模型</h4><p><img src="https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCtASWS2KK5DOaHjiasJGHBtbEZjoJD0Vla36ynGbUnDQ9B0d264GcaIaPPJZTdJWBjzBAGe3l7caPg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><ul><li><p>其中 Lane (s) 表示优先级区间，31 个 bit，每一个 bit 都表示一个优先级，如果有多个 bit 则表示这一类型支持批处理，各种类型的区间不会重合（除了 NonIdleLanes）；</p></li><li><p>其中 InputDiscreteLanes 表示” 用户交互 “触发的更新所拥有的优先级区间，SyncLane 表示同步更新，DefaultLanes 表示异步请求后更新；</p></li></ul><p>Lane(s) 模型相较于 expirationTimes 模型更加地细粒度化，可扩展性也更强，也就很好地解决了 CPU 任务和 IO 任务的优先级区分问题。</p>',56),s={},i=(0,n(3744).Z)(s,[["render",function(e,a){return r}]])},3744:(e,a)=>{a.Z=(e,a)=>{const n=e.__vccOpts||e;for(const[e,r]of a)n[e]=r;return n}}}]);