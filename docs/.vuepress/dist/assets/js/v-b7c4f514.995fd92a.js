"use strict";(self.webpackChunkbaiziyu_fe_notes=self.webpackChunkbaiziyu_fe_notes||[]).push([[251],{5652:(l,i,e)=>{e.r(i),e.d(i,{data:()=>t});const t={key:"v-b7c4f514",path:"/interview/EventLoop%E8%AF%A6%E8%A7%A3.html",title:"EventLoop",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"浏览器线程",slug:"浏览器线程",children:[]},{level:2,title:"同步与异步执行顺序",slug:"同步与异步执行顺序",children:[]}],filePathRelative:"interview/EventLoop详解.md",git:{updatedTime:1639387904e3,contributors:[{name:"baiziyu-fe",email:"77950278+baiziyu-fe@users.noreply.github.com",commits:1}]}}},4797:(l,i,e)=>{e.r(i),e.d(i,{default:()=>a});const t=(0,e(6252).uE)('<h1 id="eventloop" tabindex="-1"><a class="header-anchor" href="#eventloop" aria-hidden="true">#</a> EventLoop</h1><blockquote><p>Event Loop即事件循环，是浏览器或Node解决单线程运行时不会阻塞的一种机制。</p></blockquote><h2 id="浏览器线程" tabindex="-1"><a class="header-anchor" href="#浏览器线程" aria-hidden="true">#</a> 浏览器线程</h2><ol><li>GUI渲染线程</li></ol><ul><li>绘制页面，解析HTML、CSS，构建DOM树等</li><li>页面的重绘和重排</li><li>与JS引擎互斥(JS引擎阻塞页面刷新)</li></ul><ol start="2"><li>JS引擎线程</li></ol><ul><li>js脚本代码执行</li><li>负责执行准备好的事件，例如定时器计时结束或异步请求成功且正确返回 与GUI渲染线程互斥</li></ul><ol start="3"><li>事件触发线程</li></ol><ul><li>当对应的事件满足触发条件，将事件添加到js的任务队列末尾</li><li>多个事件加入任务队列需要排队等待</li></ul><ol start="4"><li>定时器触发线程</li></ol><ul><li>负责执行异步的定时器类事件：setTimeout、setInterval等</li><li>浏览器定时计时由该线程完成，计时完毕后将事件添加至任务队列队尾</li></ul><ol start="5"><li>HTTP请求线程</li></ol><ul><li>负责异步请求</li><li>当监听到异步请求状态变更时，如果存在回调函数，该线程会将回调函数加入到任务队列队尾</li></ul><h2 id="同步与异步执行顺序" tabindex="-1"><a class="header-anchor" href="#同步与异步执行顺序" aria-hidden="true">#</a> 同步与异步执行顺序</h2><ol><li>JavaScript将任务分为同步任务和异步任务，同步任务进入主线中中，异步任务首先到Event Table进行回调函数注册。</li><li>当异步任务的触发条件满足，将回调函数从Event Table压入Event Queue中。</li><li>主线程里面的同步任务执行完毕，系统会去Event Queue中读取异步的回调函数。</li><li>只要主线程空了，就会去Event Queue读取回调函数，这个过程被称为Event Loop。</li></ol><p><strong>JavaScript除了广义上将任务划分为同步任务和异步任务，还对异步任务进行了更精细的划分。异步任务又进一步分为微任务和宏任务。</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz/pfCCZhlbMQTGOrlPicX20J8JYBfoF8vxS4icVOl2ls6B6loSPMxTicOyQh54QPFLibU5Hxs8eBHtpLWE8UwzxAw0Rg/640?wx_fmt=other&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><p>宏任务和微任务分别有各自的任务队列Event Queue，即宏任务队列和微任务队列。</p><p>了解到宏任务与微任务过后，我们来学习宏任务与微任务的执行顺序。</p><ol><li>代码开始执行，创建一个全局调用栈，script作为宏任务执行</li><li>执行过程过同步任务立即执行，异步任务根据异步任务类型分别注册到微任务队列和宏任务队列</li><li>同步任务执行完毕，查看微任务队列</li><li>若存在微任务，将微任务队列全部执行(包括执行微任务过程中产生的新微任务)</li><li>若无微任务，查看宏任务队列，执行第一个宏任务，宏任务执行完毕，查看微任务队列，重复上述操作，直至宏任务队列为空 更新一下Event Loop的执行顺序图：</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz/pfCCZhlbMQTGOrlPicX20J8JYBfoF8vxS5BXvtaVaFryoFKicw1egMibEicsfN6SuRosxCib1j1NblgboWcBwcpldwg/640?wx_fmt=other&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p>',21),o={},a=(0,e(3744).Z)(o,[["render",function(l,i){return t}]])},3744:(l,i)=>{i.Z=(l,i)=>{const e=l.__vccOpts||l;for(const[l,t]of i)e[l]=t;return e}}}]);